@page "/vehicles"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
 
<h3 class="card-title">Vehicle</h3>
<br />

<a href="/vehicles/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Vehicle
</a>
@if (Vehicles == null)
{
    <div class="alert alert-info">Loading Vehicles...</div>
}
else
{
    <table class="table table-responsive" id="vehiclesTable">
        <thead>
            <tr>
                <th>Vehicle ID</th>
                <th>Vehicle Make</th>
                <th>Vehicle Model</th>
                <th>License Plate Number</th>
                <th>Driver ID</th>
                <th>Category ID</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehicle in Vehicles)
            {
            <tr>
                <td>@vehicle.Id</td>
                <td>@vehicle.VehicleMake</td>
                <td>@vehicle.VehicleModel</td>
                <td>@vehicle.LicensePlateNumber</td>
                <td>@vehicle.VehicleOwner.StaffGender</td>
                <td>@vehicle.VehicleCategory.Name</td>
                <td>
                    <a href="/vehicles/view/@vehicle.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/vehicles/edit/@vehicle.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(vehicle.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<Vehicle> Vehicles;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");

    }

    async Task Delete(int vehicleID)
    {
        var vehicle = Vehicles.First(q => q.Id == vehicleID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {vehicle.LicensePlateNumber}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.VehiclesEndpoint}/{vehicleID}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#vehiclesTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#vehiclesTable");
    }
}
