@page "/vehiclecategorys"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable
 
<h3 class="card-title">VehicleCategory</h3>
<br />

<a href="/vehiclecategorys/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New VehicleCategory
</a>
@if (VehicleCategorys == null)
{
    <div class="alert alert-info">Loading VehicleCategorys...</div>
}
else
{
    <table class="table table-responsive" id="vehiclecategorysTable">
        <thead>
            <tr>
                <th>Category ID</th>
                <th>Name</th>
                <th>Capacity</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vehiclecategory in VehicleCategorys)
            {
            <tr>
                <td>@vehiclecategory.Id</td>
                <td>@vehiclecategory.Name</td>
                <td>@vehiclecategory.Capacity</td>
                <td>@vehiclecategory.Price</td>
                <td>
                    <a href="/vehiclecategorys/view/@vehiclecategory.Id" class="btn btn-primary">
                        <span class="oi oi-book"></span>
                    </a>
                    <a href="/vehiclecategorys/edit/@vehiclecategory.Id" class="btn btn-warning">
                        <span class="oi oi-pencil"></span>
                    </a>
                    <button class="btn btn-danger" @onclick="@(()=>Delete(vehiclecategory.Id))">
                        <span class="oi oi-delete"></span>
                    </button>
                </td>
            </tr>
            }
        </tbody>
    </table>
}

@code {

    private List<VehicleCategory> VehicleCategorys;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        VehicleCategorys = await _client.GetFromJsonAsync<List<VehicleCategory>>($"{Endpoints.VehicleCategorysEndpoint}");

    }

    async Task Delete(int VehicleCategoryID)
    {
        var vehiclecategory = VehicleCategorys.First(q => q.Id == VehicleCategoryID);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {vehiclecategory.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.VehicleCategorysEndpoint}/{VehicleCategoryID}");
            await OnInitializedAsync();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#vehiclecategorysTable");
    }
    public void Dispose()
    {
        js.InvokeVoidAsync("DataTablesDispose", "#vehiclecategorysTable");
    }

}
