@inject HttpClient _client

<EditForm Model="@booking" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Pick Up Location: </label>
    </div>
    <InputText @bind-Value="@booking.PickUpLocation" class="form-control" />
    <ValidationMessage For="@(()=> booking.PickUpLocation)" />

    <div class="form-group">
        <label>Destination: </label>
    </div>
    <InputText @bind-Value="@booking.Destination" class="form-control" />
    <ValidationMessage For="@(()=> booking.Destination)" />

    <div class="form-group">
        <label>Payment Method: </label>
    </div>
    <InputSelect class="form-control" @bind-Value="booking.PaymentMethod">
        <option value="-- Select Payment Method --">-- Select Payment Method --</option>
        <option value="Cash">Cash</option>
        <option value="Credit Card">Credit Card</option>
    </InputSelect>
    <ValidationMessage For="@(() => booking.PaymentMethod)" />

    <div class="form-group">
        <label>Date & Time: </label>
        <div>
            <InputDate @bind-Value="@booking.Date" class="form-control" />
            <ValidationMessage For="@(() => booking.Date)" />
        </div>
    </div>
    <div class="form-group">
        <label>Admin ID: </label>
    </div>
    <InputSelect @bind-Value="booking.AdminId" class="form-control">
        <option value="">-- Select AdminId --</option>
        @if (Staffs != null)
        {
            foreach (var staffs in Staffs)
            {
                <option value="@staffs.Id">@staffs.Id</option>
            }
        }
    </InputSelect>
    <ValidationMessage For="@(()=>booking.AdminId)" />
    <div class="form-group">
        <label>Driver ID: </label>
    </div>
    <InputSelect @bind-Value="booking.DriverId" class="form-control">
        <option value="">-- Select DriverId --</option>
        @if (Staffs != null)
        {
            foreach (var staffs in Staffs)
            {
                <option value="@staffs.Id">@staffs.Id</option>
            }
        }
    </InputSelect>
    <ValidationMessage For="@(()=>booking.DriverId)" />
    <div class="form-group">
        <label>Passenger ID: </label>
    </div>
    <InputSelect @bind-Value="booking.PassengerId" class="form-control">
        <option value="">-- Select PassengerId --</option>
        @if (Passengers != null)
        {
            foreach (var passengers in Passengers)
            {
                <option value="@passengers.Id">@passengers.Id</option>
            }
        }
    </InputSelect>
    <ValidationMessage For="@(()=>booking.PassengerId)" />
    <div class="form-group">
        <label>Category ID: </label>
    </div>
    <InputSelect @bind-Value="booking.CategoryId" class="form-control">
        <option value="">-- Select RoleID --</option>
        @if (VehicleCategorys != null)
        {
            foreach (var vehiclecategorys in VehicleCategorys)
            {
                <option value="@vehiclecategorys.Id">@vehiclecategorys.Id</option>
            }
        }
    </InputSelect>
    <ValidationMessage For="@(()=>booking.CategoryId)" />
    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>
    <BackToList Target="bookings" />

    <button type="submit" class="btn btn-success btn-block">
        @ButtonText
    </button>

</EditForm>


@code {
    [Parameter] public Booking booking { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Staff> Staffs;
    private IList<Passenger> Passengers;
    private IList<VehicleCategory> VehicleCategorys;

    protected async override Task OnInitializedAsync()
    {
        Passengers = await _client.GetFromJsonAsync<List<Passenger>>($"{Endpoints.PassengersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        VehicleCategorys = await _client.GetFromJsonAsync<List<VehicleCategory>>($"{Endpoints.VehicleCategorysEndpoint}");

    } }